generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Next Auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    bio           String       @default("a learner")
    xp            Int          @default(0)
    role          Role         @default(LEARNER)
    responses     Response[]
    enrollments   Enrollment[]
    accounts      Account[]
    sessions      Session[]
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Schema

enum Role {
    LEARNER
    ADMIN
}

model Enrollment {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    subject   Language @relation(fields: [subjectId], references: [id])
    subjectId Int
}

enum QuestionType {
    MULTIPLE_CHOICE
    MATCH_THE_FOLLOWING
    FILL_IN_THE_BLANK
    REORDER_WORDS
}

model Language {
    id          Int          @id @default(autoincrement())
    name        String
    chapters    Chapter[]
    enrollments Enrollment[]
    words       Word[]
    responses   Response[]
}

model Word {
    id         Int      @id @default(autoincrement())
    language   Language @relation(fields: [languageId], references: [id])
    languageId Int
    audio      String
}

model Chapter {
    id          Int      @id @default(autoincrement())
    name        String
    description String
    language    Language @relation(fields: [languageId], references: [id])
    languageId  Int
    quizzes     Quiz[]
}

model Quiz {
    id        Int        @id @default(autoincrement())
    name      String
    chapter   Chapter    @relation(fields: [chapterId], references: [id])
    chapterId Int
    questions Question[]
    responses Response[]
}

model Question {
    id         Int          @id @default(autoincrement())
    text       String
    type       QuestionType
    difficulty Int
    answer     Json
    options    Option[]
    quiz       Quiz         @relation(fields: [quizId], references: [id])
    quizId     Int
}

model Option {
    id         Int      @id @default(autoincrement())
    text       String
    question   Question @relation(fields: [questionId], references: [id])
    questionId Int
}

model Response {
    id          Int      @id @default(autoincrement())
    user        User     @relation(fields: [userId], references: [id])
    userId      String
    score       Int
    quiz        Quiz     @relation(fields: [quizId], references: [id])
    quizId      Int
    language    Language @relation(fields: [languageId], references: [id])
    languageId  Int
    submittedAt DateTime @default(now())
}
